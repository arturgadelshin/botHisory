import nltk
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.corpus.reader.plaintext import PlaintextCorpusReader
import time
import natasha as nt
from parse_history_txt import parse_history
from aiogram import Bot, Dispatcher, executor, types
import nest_asyncio
import logging
from datetime import datetime

# add filemode="w" to overwrite
logging.basicConfig(filename="log.txt", level=logging.INFO)


follow_user = {
    'id': 0,
    'first_name': '',
    'last_name': '',
    'username': '',
    'datetime': '',
    'message': '',
    'answer': '',
}


try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

nest_asyncio.apply()

print(parse_history())


# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
segmenter = nt.Segmenter()
morph_vocab = nt.MorphVocab()
emb = nt.NewsEmbedding()
morph_tagger = nt.NewsMorphTagger(emb)
ner_tagger = nt.NewsNERTagger(emb)

#syntax_parser = nt.NewsSyntaxParser(emb)


# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
def Normalize(text):

    # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    word_token = str(re.sub("[^\w]", " ", text))
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç Doc –∏


    doc = nt.Doc(word_token)
    doc.segment(segmenter)
    doc.tag_morph(morph_tagger)
    doc.tag_ner(ner_tagger)


    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∫ –µ–≥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
    for token in doc.tokens:
        token.lemmatize(morph_vocab)
    resDict = {_.text: _.lemma for _ in doc.tokens}


    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
    return [resDict[i] for i in resDict]


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
def Response(user_response):
    start = time.time()
    user_response = user_response.lower()
    robo_response = ''  # –ë—É–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    sent_tokens.append(user_response)  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à –∫–æ—Ä–ø—É—Å.
    TfidfVec = TfidfVectorizer(tokenizer=Normalize)  # –í—ã–∑–æ–≤–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä TF-IDF
    tfidf = TfidfVec.fit_transform(sent_tokens)

    # –°–æ–∑–¥–∞–¥–∏–º –≤–µ–∫—Ç–æ—Ä–∞
    vals = cosine_similarity(tfidf[-1], tfidf)  # –ß–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    idx = vals.argsort()[0][-2]  # –ó–∞–ø–æ–º–Ω–∏–º –∏–Ω–¥–µ–∫—Å—ã —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è # 0 –∏–Ω–¥–µ–∫—Å
    flat = vals.flatten()  # –°–≥–ª–∞–∂–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    flat.sort()

    req_tfidf = flat[-2]
    sent_tokens.remove(user_response)
    end = time.time()
    if (req_tfidf == 0):  # –ï—Å–ª–∏ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 0, —Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        robo_response = robo_response + "üòû –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞...\nüòê –ö–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å\n‚åõ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–æ {} —Å–µ–∫—É–Ω–¥".format(round(end-start,3))
        answer_bot = 'None'
        return robo_response, answer_bot
    else:
        answer_bot = sent_tokens[idx]
        robo_response = "‚û° "+robo_response + sent_tokens[idx] + "\n‚åõ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–æ {} —Å–µ–∫—É–Ω–¥".format(round(end-start,3))
        return robo_response, answer_bot




# –ë–æ—Ç


# –ó–∞–¥–∞–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞
reader = PlaintextCorpusReader('newcorpus/', r'.*\.txt')
data = reader.raw(reader.fileids())
sent_tokens = nltk.sent_tokenize(data)


welcome_input = ["–ø—Ä–∏–≤–µ—Ç", "–∫—É", "–ø—Ä–∏–≤", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
                 "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"]  # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–µ—Å—Ç–≤–∏–π
goodbye_input = ["–ø–æ–∫–∞", "—Å—Ç–æ–ø", "–≤—ã—Ö–æ–¥", "–∫–æ–Ω–µ—Ü", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—â–∞–Ω–∏–π

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –∏ —á—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
with open('token.txt', 'r') as file_token:
  token = file_token.read()


bot = Bot(token=token)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher(bot)  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞


@dp.message_handler(commands=['start'])  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ start
async def hi_func(message: types.Message):
    await message.answer("ü§ó –ü—Ä–∏–≤–µ—Ç!\n –Ø –±–æ—Ç-–∏—Å—Ç–æ—Ä–∏–∫!")
    await message.answer("üñã –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –¥–∞—Ç—É, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ª–∏—á–Ω–æ—Å—Ç—å, –∞ —è –Ω–∞–π–¥—É "
                         "–ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... ")
    await message.answer("üñã –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∞–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞? –ñ–º–∏ /author")


@dp.message_handler(commands=['author'])  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ start
async def hi_func(message: types.Message):
    await message.answer("–ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞:\n –ì–∞–¥–µ–ª—å—à–∏–Ω –ê—Ä—Ç—É—Ä \nwww.arturgadelshin.ru")


@dp.message_handler()  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è
async def search_func(message: types.message):
    follow_user.update({
        'id': message.from_user.id,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'username': message.from_user.username,
        'message': message.text.lower(),
        'datetime': datetime.now(),
    })

    if (message.text).lower() in welcome_input:
        await message.answer('ü§ó –ü—Ä–∏–≤–µ—Ç!')
    elif (message.text).lower() in goodbye_input:
        await message.answer('ü§ó –ü–æ–∫–∞! \n–ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å!')
    else:
        await message.answer('üßê –î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å...')
        res, answer = Response(message.text)
        follow_user.update({'answer': answer})
        await message.answer(res)
    logging.info(follow_user)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
